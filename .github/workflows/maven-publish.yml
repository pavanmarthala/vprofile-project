# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package
on:
  push:
    branches:
      - vp-r


jobs:
  build:

    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn package
        
    - name: Build the Docker image
      run: docker build -t pavanmarthala/pavan:${GITHUB_REF##*/}  .
    - name: Deploy to AWS ECS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-1' # Replace with your AWS region
        ECS_CLUSTER_NAME: 'your-ecs-cluster-name' # Replace with your ECS cluster name
        ECS_SERVICE_NAME: 'your-ecs-service-name' # Replace with your ECS service name
        ECS_TASK_FAMILY: 'your-task-family-name' # Replace with your ECS task family name
      run: |
        # Log in to Amazon ECR (Elastic Container Registry)
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin your-aws-account-id.dkr.ecr.your-aws-region.amazonaws.com
        
        # Tag the Docker image with the ECR repository URI
        docker tag pavanmarthala/pavan:${GITHUB_REF##*/} your-aws-account-id.dkr.ecr.your-aws-region.amazonaws.com/pavan:${GITHUB_REF##*/}
        
        # Push the Docker image to ECR
        docker push your-aws-account-id.dkr.ecr.your-aws-region.amazonaws.com/pavan:${GITHUB_REF##*/}
        
        # Update the ECS service with the new task definition
        aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment --task-definition $ECS_TASK_FAMILY:${GITHUB_REF##*/}


